version: 2.1

orbs:
  moj-dps:
    orbs:
      aws-cli: circleci/aws-cli@0.1.18
      kubernetes: circleci/kubernetes@0.10.1
      helm: circleci/helm@0.2.3
      slack: circleci/slack@3.4.2
      mem: circleci/rememborb@0.0.1
    jobs:
      build_docker:
        executor: default
        parameters:
          image_name:
            type: string
        steps:
          - checkout
          - setup_remote_docker:
              docker_layer_caching: true
          - create_app_version
          - run:
              name: Build container and publish to docker hub
              command: |
                IMAGE_NAME="<< parameters.image_name >>"
                docker build --rm=false . \
                  --build-arg BUILD_NUMBER=$APP_VERSION \
                  --build-arg GIT_REF=$CIRCLE_SHA1 \
                  --tag "<< parameters.image_name >>:${APP_VERSION}" \
                  --label "maintainer=dps-hmpps@digital.justice.gov.uk" \
                  --label "app.version=${APP_VERSION}" \
                  --label "build.version=${APP_VERSION}" \
                  --label "build.number=${CIRCLE_BUILD_NUM}" \
                  --label "build.url=${CIRCLE_BUILD_URL}" \
                  --label "build.gitref=${CIRCLE_SHA1}"

                # Copy build-info.json from image
                docker run -it --rm "<< parameters.image_name >>:${APP_VERSION}" cat /app/build-info.json > build-info.json
                
                cat build-info.json

                #push to quay.io
                docker login -u="${QUAYIO_USERNAME}" -p="${QUAYIO_PASSWORD}" quay.io
                docker tag "<< parameters.image_name >>:${APP_VERSION}" "<< parameters.image_name >>:latest"
                docker push "<< parameters.image_name >>:${APP_VERSION}"
                docker push "<< parameters.image_name >>:latest"
      deploy_to_env:
        executor: default
        parameters:
          env:
            type: string
          app_name:
            type: string
          slack_notification:
            type: boolean
            default: false
        steps:
          - checkout
          - k8s_setup
          - mem/recall:
              env_var: APP_VERSION
          - deploy:
              name: Deploy to << parameters.env >>
              command: |
                sed -i "s/appVersion: \".*\"/appVersion: \"${APP_VERSION}\"/g" ~/helm_deploy/<< parameters.app_name >>/Chart.yaml
                aws secretsmanager get-secret-value --secret-id ${AWS_SECRET_NAME} | jq -r .SecretString | \
                helm upgrade << parameters.app_name >> ~/helm_deploy/<< parameters.app_name >>/. \
                  --install --wait --reset-values --timeout 5m --history-max 10 \
                  --namespace=${KUBE_ENV_NAMESPACE} \
                  --values ~/helm_deploy/values-<< parameters.env >>.yaml \
                  --values - \
                  --set image.tag="${APP_VERSION}"
          - when:
              condition: <<parameters.slack_notification>>
              steps:
                - slack/notify:
                    message: "*<< parameters.app_name >>* version:*${APP_VERSION}* deployed to << parameters.env >>"
                    include_project_field: false
                    include_job_number_field: false
    commands:
      k8s_setup:
        description: "Install tools and configure kubectl"
        steps:
          - aws-cli/install
          - kubernetes/install
          - helm/install-helm-client:
              version: v3.0.2
          - run:
              name: Setup kubectl
              command: |
                echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
                kubectl config set-cluster "${KUBE_ENV_NAME}" \
                  --certificate-authority="/tmp/cluster_ca.crt" \
                  --server="https://api.${KUBE_ENV_NAME}"
                kubectl config set-credentials circleci \
                  --token="${KUBE_ENV_TOKEN}"
                kubectl config set-context circleci \
                  --cluster="${KUBE_ENV_NAME}" \
                  --user="circleci" \
                  --namespace="${KUBE_ENV_NAMESPACE}"
                # confirm setup is ok
                kubectl config use-context circleci
      create_app_version:
        description: "Create new application version"
        steps:
          - run: 
              name: Create app version string
              command: |
                  DATE=$(date '+%Y-%m-%d')
                  SHORT_SHA1=$(echo $CIRCLE_SHA1 | cut -c1-7)
                  VERSION=${DATE}.${CIRCLE_BUILD_NUM}.${SHORT_SHA1}
                  echo "Created version string: ${VERSION}"
                  echo "export VERSION=$VERSION" >> $BASH_ENV
          - mem/remember:
              env_var: APP_VERSION
              value: "${VERSION}"
    executors:
      default:
        docker:
          - image: circleci/python:3
        working_directory: ~/app

executors:
  builder:
    docker:
      - image: circleci/node:12.16.1-buster-browsers
    working_directory: ~/app
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app

jobs:
  build:
    executor: builder
    steps:
      - checkout
      - restore_cache:
          key: node_modules-{{ checksum "yarn.lock" }}-{{ checksum "package.json" }}
      - run:
          name: Install Dependencies
          command: yarn --frozen-lockfile
      - save_cache:
          key: node_modules-{{ checksum "yarn.lock" }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run eslint
          command: yarn lint:js:ci
      - run:
          name: Run scss-lint
          command: yarn stylelint:ci
      - run:
          name: Run Tests
          command: |
            set -e
            yarn test --maxWorkers=2
      - run: export NODE_ENV=production yarn build
      - store_artifacts:
          path: test-report.html
      - store_artifacts:
          path: scss-report.txt
      - store_artifacts:
          path: eslint-report.html
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build

  integration_tests:
    working_directory: ~/app
    docker:
      - image: circleci/node:12.16.1-buster-browsers
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Run the node app.
          command: yarn start-feature
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 10
      - restore_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: gradle-cache-{{ checksum "notm-specs/build.gradle" }}
      - run:
          name: Run Integration Tests
          command: ./gradlew build --info
      - save_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          paths:
            - /home/circleci/.gradle/wrapper
      - save_cache:
          key: gradle-cache-{{ checksum "notm-specs/build.gradle" }}
          paths:
            - /home/circleci/.gradle/caches
      - store_artifacts:
          path: notm-specs/build/reports
          destination: integration/spock
      - store_artifacts:
          path: notm-specs/build/geb-reports
          destination: integration/geb
      - store_test_results:
          path: notm-specs/build/test-results



  security_audit:
    executor: builder
    steps:
      - checkout
      - run:
          name: update-yarn
          command: 'sudo yarn global add yarn'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-yarn
          command: 'yarn --frozen-lockfile --no-audit'
      - run:
          name: run-security-audit
          command: 'yarn security_audit'

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      #- build:
      #    filters:
      #      tags:
      #        ignore: /.*/
      #- integration_tests:
      #    requires:
      #      - build
      - moj-dps/build_docker:
          name: build_docker
          image_name: "quay.io/hmpps/new-nomis-ui"
          filters:
            branches:
              only:
                - master
                - orb_testing 
      - moj-dps/deploy_to_env:
          name: deploy_dev
          env: "dev"
          app_name: "notm"
          filters:
            branches:
              only:
                - master
                - orb_testing
          requires:
            - build_docker
            #- integration_tests
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - moj-dps/deploy_to_env:
          name: deploy_preprod
          env: "preprod"
          app_name: "notm"
          context: notm-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - moj-dps/deploy_to_env:
          name: deploy_prod
          env: "prod"
          app_name: "notm"
          slack_notification: true
          context: notm-prod
          requires:
            - request-prod-approval

  scheduled:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - security_audit
