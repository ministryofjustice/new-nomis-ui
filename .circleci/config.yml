defaults: &defaults
  working_directory: ~/app
  docker:
    - image: circleci/node:10.15.0-browsers

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: node_modules-{{ checksum "yarn.lock" }}-{{ checksum "package.json" }}
      - run:
          name: Install Dependencies
          command: yarn --frozen-lockfile
      - save_cache:
          key: node_modules-{{ checksum "yarn.lock" }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run eslint
          command: yarn lint:js:ci
      - run:
          name: Run scss-lint
          command: yarn stylelint:ci
      - run:
          name: Run Tests
          command: |
             set -e
             yarn test
      - run: export CLIENT=hmpps && NODE_ENV=production yarn build
      - run: |
             DATE=$(date '+%Y-%m-%d')
             export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
             export GIT_REF=${CIRCLE_SHA1}
             export GIT_DATE=${DATE}
             yarn record-build-info
      - store_artifacts:
          path: test-report.html
      - store_artifacts:
          path: scss-report.txt
      - store_artifacts:
          path: eslint-report.html
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build
            - build-info.json

  integration_tests:
    working_directory: ~/app
    docker:
      - image: circleci/openjdk:11-jdk-node-browsers
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Run the node app.
          command: yarn start
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 10
      - restore_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: gradle-cache-{{ checksum "notm-specs/build.gradle" }}
      - run:
          name: Run Integration Tests
          command: ./gradlew build --info
      - save_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          paths:
              - /home/circleci/.gradle/wrapper
      - save_cache:
          key: gradle-cache-{{ checksum "notm-specs/build.gradle" }}
          paths:
              - /home/circleci/.gradle/caches
      - store_artifacts:
          path: notm-specs/build/reports
          destination: integration/spock
      - store_artifacts:
          path: notm-specs/build/geb-reports
          destination: integration/geb
      - store_test_results:
          path: notm-specs/build/test-results

  deploy_release:
      <<: *defaults
      steps:
        - checkout
        - attach_workspace:
            at: ~/app
        - run:
            name: Deploy Release to Dev
            command: |
              BUILD_NUMBER=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')
              GIT_REF=$(egrep gitRef build-info.json  | awk -F"\"" '{print $4}')
              git add --force --verbose build-info.json build
              git config user.name "Circle CI"
              git config user.email "circle@circleci.com"
              CI_MESSAGE=$(git log --format=%B -n 1 $GIT_REF)
              git commit -m "Deployment of build $BUILD_NUMBER" -m "$CI_MESSAGE" -m "From gitref $GIT_REF"
              git push --force origin HEAD:deploy-to-dev
              git tag ${BUILD_NUMBER}
              git push --tags

  build_docker:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          exclusive: true
      - run:
          name: Build container and publish to docker hub (master only)
          command: |
             VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')
             GIT_REF=$(egrep gitRef build-info.json  | awk -F"\"" '{print $4}')
             GIT_DATE=$(egrep gitDate build-info.json  | awk -F"\"" '{print $4}')
             if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
               BUILD_VERSION=NEW_NOMIS_UI_${VERSION}
             else
               BUILD_VERSION=${VERSION}.${CIRCLE_BRANCH}
             fi

             docker build --rm=false . \
                 --build-arg CLIENT=hmpps \
                 --build-arg BUILD_NUMBER=$VERSION \
                 --build-arg GIT_REF=$GIT_REF \
                 --build-arg GIT_DATE=$GIT_DATE \
                 --tag "mojdigitalstudio/new-nomis-ui:$BUILD_VERSION" \
                 --label "maintainer=michael.willis@digital.justice.gov.uk" \
                 --label "build.number=$CIRCLE_BUILD_NUM" \
                 --label "build.url=$CIRCLE_BUILD_URL" \
                 --label "build.gitref=$GIT_REF"

             docker login -u $DOCKER_USER -p $DOCKER_PASS
             docker tag mojdigitalstudio/new-nomis-ui:$BUILD_VERSION mojdigitalstudio/new-nomis-ui:latest
             docker push mojdigitalstudio/new-nomis-ui:$BUILD_VERSION
             docker push mojdigitalstudio/new-nomis-ui:latest

  deploy_release_eb:
    working_directory: ~/app
    docker:
      - image: mojdigitalstudio/circleci-node-awsebcli
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to Elastic Beanstalk Dev
          command: |
            VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')
            yarn run plant-beanstalk ${VERSION}
            ~/.local/bin/eb deploy notm-dev --process --verbose --label ${VERSION}
            fi


  deploy_release_stage_eb:
    working_directory: ~/app
    docker:
      - image: mojdigitalstudio/circleci-node-awsebcli
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to Elastic Beanstalk Stage
          command: |
            VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')
            yarn run plant-beanstalk ${VERSION}
            ~/.local/bin/eb deploy notm-stage --process --verbose --label ${VERSION}

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                  - deploy-to-dev
                  - deploy-to-preprod
                  - deploy-to-prod
      - integration_tests:
          requires:
            - build
      - build_docker:
          requires:
            - integration_tests
          filters:
            branches:
              only:
                - master
                - notm-to-aws
      - deploy_release:
          requires:
            - integration_tests
          filters:
            branches:
              only: master
      - deploy_release_eb:
          requires:
            - deploy_release
            - build_docker
      - hold:
          type: approval
          requires:
            - build_docker
      - deploy_release_stage_eb:
          requires:
            - hold